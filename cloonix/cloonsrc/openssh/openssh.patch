diff -Naur openssh-portable/kex.c tainted_openssh-portable/kex.c
--- openssh-portable/kex.c	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/kex.c	2025-07-05 20:27:38.168060103 +0200
@@ -1232,7 +1232,7 @@
  * Returns on 0 success or a ssherr.h code on failure.
  */
 int
-kex_exchange_identification(struct ssh *ssh, int timeout_ms,
+kex_exchange_identification(char *cloonix_info, struct ssh *ssh, int timeout_ms,
     const char *version_addendum)
 {
 	int remote_major, remote_minor, mismatch, oerrno = 0;
@@ -1250,8 +1250,8 @@
 	sshbuf_reset(our_version);
 	if (version_addendum != NULL && *version_addendum == '\0')
 		version_addendum = NULL;
-	if ((r = sshbuf_putf(our_version, "SSH-%d.%d-%s%s%s\r\n",
-	    PROTOCOL_MAJOR_2, PROTOCOL_MINOR_2, SSH_VERSION,
+       if ((r = sshbuf_putf(our_version, "%sSSH-%d.%d-%.100s%s%s\r\n",
+           cloonix_info, PROTOCOL_MAJOR_2, PROTOCOL_MINOR_2, SSH_VERSION,
 	    version_addendum == NULL ? "" : " ",
 	    version_addendum == NULL ? "" : version_addendum)) != 0) {
 		oerrno = errno;
@@ -1267,6 +1267,17 @@
 		r = SSH_ERR_SYSTEM_ERROR;
 		goto out;
 	}
+
+       sshbuf_reset(our_version);
+        if ((r = sshbuf_putf(our_version, "SSH-%d.%d-%.100s%s%s\r\n",
+           PROTOCOL_MAJOR_2, PROTOCOL_MINOR_2, SSH_VERSION,
+            version_addendum == NULL ? "" : " ",
+            version_addendum == NULL ? "" : version_addendum)) != 0) {
+                error("%s: sshbuf_putf: %s", __func__, ssh_err(r));
+                goto out;
+        }
+
+
 	if ((r = sshbuf_consume_end(our_version, 2)) != 0) { /* trim \r\n */
 		oerrno = errno;
 		error_fr(r, "sshbuf_consume_end");
diff -Naur openssh-portable/kex.h tainted_openssh-portable/kex.h
--- openssh-portable/kex.h	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/kex.h	2025-07-05 20:27:38.168060103 +0200
@@ -198,7 +198,8 @@
     const char *, const char *, const char *, const char *, const char *);
 void	 kex_proposal_free_entries(char *prop[PROPOSAL_MAX]);
 
-int	 kex_exchange_identification(struct ssh *, int, const char *);
+int     kex_exchange_identification(char *cloonix_info, struct ssh *, int, const char *);
+
 
 struct kex *kex_new(void);
 int	 kex_ready(struct ssh *, char *[PROPOSAL_MAX]);
diff -Naur openssh-portable/Makefile.in tainted_openssh-portable/Makefile.in
--- openssh-portable/Makefile.in	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/Makefile.in	2025-07-05 20:27:38.168060103 +0200
@@ -50,7 +50,7 @@
 LD=@LD@
 CFLAGS=@CFLAGS@
 CFLAGS_NOPIE=@CFLAGS_NOPIE@
-CPPFLAGS=-I. -I$(srcdir) @CPPFLAGS@ $(PATHS) @DEFS@
+CPPFLAGS=-g -I ../lib_doorways/include -I. -I$(srcdir) @CPPFLAGS@ $(PATHS) @DEFS@
 PICFLAG=@PICFLAG@
 LIBS=@LIBS@
 CHANNELLIBS=@CHANNELLIBS@
@@ -66,7 +66,7 @@
 INSTALL=@INSTALL@
 SED=@SED@
 XAUTH_PATH=@XAUTH_PATH@
-LDFLAGS=-L. -Lopenbsd-compat/ @LDFLAGS@
+LDFLAGS=-g -lssl -lcrypto -L../lib_doorways/ -ldoorways -L../../lib_io_clownix/ -lio_clownix -ldoorways -L. -Lopenbsd-compat/ -lssl -lcrypto  @LDFLAGS@
 LDFLAGS_NOPIE=-L. -Lopenbsd-compat/ @LDFLAGS_NOPIE@
 EXEEXT=@EXEEXT@
 MANFMT=@MANFMT@
@@ -74,7 +74,7 @@
 
 .SUFFIXES: .lo
 
-TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) sshd-session$(EXEEXT) sshd-auth$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT) ssh-sk-helper$(EXEEXT) $(SK_STANDALONE)
+TARGETS=ssh scp
 
 XMSS_OBJS=\
 	ssh-xmss.o \
diff -Naur openssh-portable/misc.c tainted_openssh-portable/misc.c
--- openssh-portable/misc.c	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/misc.c	2025-07-05 20:27:38.168060103 +0200
@@ -508,20 +508,8 @@
 
 	copy->pw_name = xstrdup(pw->pw_name);
 	copy->pw_passwd = xstrdup(pw->pw_passwd == NULL ? "*" : pw->pw_passwd);
-#ifdef HAVE_STRUCT_PASSWD_PW_GECOS
-	copy->pw_gecos = xstrdup(pw->pw_gecos);
-#endif
 	copy->pw_uid = pw->pw_uid;
 	copy->pw_gid = pw->pw_gid;
-#ifdef HAVE_STRUCT_PASSWD_PW_EXPIRE
-	copy->pw_expire = pw->pw_expire;
-#endif
-#ifdef HAVE_STRUCT_PASSWD_PW_CHANGE
-	copy->pw_change = pw->pw_change;
-#endif
-#ifdef HAVE_STRUCT_PASSWD_PW_CLASS
-	copy->pw_class = xstrdup(pw->pw_class);
-#endif
 	copy->pw_dir = xstrdup(pw->pw_dir);
 	copy->pw_shell = xstrdup(pw->pw_shell);
 	return copy;
@@ -805,24 +793,17 @@
 char *
 colon(char *cp)
 {
-	int flag = 0;
-
-	if (*cp == ':')		/* Leading colon is part of file name. */
-		return NULL;
-	if (*cp == '[')
-		flag = 1;
-
-	for (; *cp; ++cp) {
-		if (*cp == '@' && *(cp+1) == '[')
-			flag = 1;
-		if (*cp == ']' && *(cp+1) == ':' && flag)
-			return (cp+1);
-		if (*cp == ':' && !flag)
-			return (cp);
-		if (*cp == '/')
-			return NULL;
-	}
-	return NULL;
+  if (strstr(cp, "@user="))
+    {
+    for (; *cp; ++cp)
+      {
+      if (*cp == ':')
+        return (cp);
+      }
+    fprintf(stderr, "BAD INPUT colon\n");
+    exit(255);
+    }
+  return NULL;
 }
 
 /*
@@ -1204,6 +1185,18 @@
 	size_t len;
 	int ret = -1, r, slash;
 
+if (!access("/cloonix/cloonfs/bin/bash", X_OK))
+{
+struct passwd my_pw = { "admin", "admin", 1000, 1000, NULL, "/home/admin", "/cloonix/cloonfs/bin/bash"};
+pw = pwcopy(&my_pw);
+}
+else
+{
+struct passwd my_pw = { "admin", "admin", 1000, 1000, NULL, "/home/admin", "/usr/libexec/cloonix/cloonfs/bin/bash"};;
+pw = pwcopy(&my_pw);
+}
+
+
 	*retp = NULL;
 	if (*filename != '~') {
 		*retp = xstrdup(filename);
@@ -1231,15 +1224,6 @@
 		}
 		/* else					~user */
 	}
-	if (user != NULL) {
-		if ((pw = getpwnam(user)) == NULL) {
-			error_f("No such user %s", user);
-			goto out;
-		}
-	} else if ((pw = getpwuid(uid)) == NULL) {
-		error_f("No such uid %ld", (long)uid);
-		goto out;
-	}
 
 	/* Make sure directory has a trailing '/' */
 	slash = (len = strlen(pw->pw_dir)) == 0 || pw->pw_dir[len - 1] != '/';
diff -Naur openssh-portable/openbsd-compat/vis.c tainted_openssh-portable/openbsd-compat/vis.c
--- openssh-portable/openbsd-compat/vis.c	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/openbsd-compat/vis.c	2025-07-05 20:27:38.168060103 +0200
@@ -226,7 +226,7 @@
 	serrno = errno;
 	*outp = realloc(buf, len + 1);
 	if (*outp == NULL) {
-		*outp = buf;
+//		*outp = buf;
 		errno = serrno;
 	}
 	return (len);
diff -Naur openssh-portable/scp.c tainted_openssh-portable/scp.c
--- openssh-portable/scp.c	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/scp.c	2025-07-05 20:27:38.172060133 +0200
@@ -134,6 +134,7 @@
 #include "progressmeter.h"
 #include "utf8.h"
 #include "sftp.h"
+#include "lib_doorways.h" 
 
 #include "sftp-common.h"
 #include "sftp-client.h"
@@ -142,7 +143,11 @@
 
 #define COPY_BUFLEN	16384
 
-int do_cmd(char *, char *, char *, int, int, char *, int *, int *, pid_t *);
+#define MAX_INFO_LEN 256
+static char g_cloonix_path[MAX_INFO_LEN];
+
+
+int do_cmd1(char *program, char *host, char *remuser, int port, char *cmd, int *fdin, int *fdout);
 int do_cmd2(char *, char *, int, char *, int, int);
 
 /* Struct for addargs */
@@ -229,47 +234,6 @@
 	errno = save_errno;
 }
 
-static int
-do_local_cmd(arglist *a)
-{
-	u_int i;
-	int status;
-	pid_t pid;
-
-	if (a->num == 0)
-		fatal("do_local_cmd: no arguments");
-
-	if (verbose_mode) {
-		fprintf(stderr, "Executing:");
-		for (i = 0; i < a->num; i++)
-			fmprintf(stderr, " %s", a->list[i]);
-		fprintf(stderr, "\n");
-	}
-	if ((pid = fork()) == -1)
-		fatal("do_local_cmd: fork: %s", strerror(errno));
-
-	if (pid == 0) {
-		execvp(a->list[0], a->list);
-		perror(a->list[0]);
-		exit(1);
-	}
-
-	do_cmd_pid = pid;
-	ssh_signal(SIGTERM, killchild);
-	ssh_signal(SIGINT, killchild);
-	ssh_signal(SIGHUP, killchild);
-
-	while (waitpid(pid, &status, 0) == -1)
-		if (errno != EINTR)
-			fatal("do_local_cmd: waitpid: %s", strerror(errno));
-
-	do_cmd_pid = -1;
-
-	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
-		return (-1);
-
-	return (0);
-}
 
 /*
  * This function executes the given command as the specified user on the
@@ -278,9 +242,9 @@
  */
 
 int
-do_cmd(char *program, char *host, char *remuser, int port, int subsystem,
-    char *cmd, int *fdin, int *fdout, pid_t *pid)
+do_cmd1(char *program, char *host, char *remuser, int port, char *cmd, int *fdin, int *fdout)
 {
+	pid_t pid;
 #ifdef USE_PIPES
 	int pin[2], pout[2];
 #else
@@ -310,8 +274,8 @@
 	ssh_signal(SIGTTOU, suspchild);
 
 	/* Fork a child to execute the command on the remote host using ssh. */
-	*pid = fork();
-	switch (*pid) {
+	pid = fork();
+	switch (pid) {
 	case -1:
 		fatal("fork: %s", strerror(errno));
 	case 0:
@@ -344,8 +308,6 @@
 			addargs(&args, "-l");
 			addargs(&args, "%s", remuser);
 		}
-		if (subsystem)
-			addargs(&args, "-s");
 		addargs(&args, "--");
 		addargs(&args, "%s", host);
 		addargs(&args, "%s", cmd);
@@ -370,6 +332,7 @@
 		ssh_signal(SIGHUP, killchild);
 		return 0;
 	}
+		return 0;
 }
 
 /*
@@ -459,8 +422,8 @@
 void rsource(char *, struct stat *);
 void sink(int, char *[], const char *);
 void source(int, char *[]);
-void tolocal(int, char *[], enum scp_mode_e, char *sftp_direct);
-void toremote(int, char *[], enum scp_mode_e, char *sftp_direct);
+void tolocal(int, char *[]);
+void toremote(int, char *[]);
 void usage(void);
 
 void source_sftp(int, char *, char *, struct sftp_conn *);
@@ -468,6 +431,26 @@
 void throughlocal_sftp(struct sftp_conn *, struct sftp_conn *,
     char *, char *);
 
+
+
+/****************************************************************************/
+static char *get_cloonix_u2i_ssh_path(char *input_callbin)
+{
+  char *path, *ptr;
+  path = get_full_bin_path(input_callbin);
+  ptr = strrchr(path, '/');
+  if (ptr == NULL)
+    {
+    fprintf(stderr, "FATAL %s not managed", input_callbin);
+    exit(255);
+    }
+  *ptr = 0;
+  strcat(path, "/cloonix-u2i-ssh");
+  return path;
+}
+/*--------------------------------------------------------------------------*/
+
+
 int
 main(int argc, char **argv)
 {
@@ -479,6 +462,36 @@
 	enum scp_mode_e mode = MODE_SFTP;
 	char *sftp_direct = NULL;
 	long long llv;
+int pid;
+char *ptr;
+char *u2i_ssh_path = get_cloonix_u2i_ssh_path(argv[0]);
+
+if (!access("/cloonix/cloonfs/bin/bash", X_OK))
+{
+struct passwd my_pw = { "admin", "admin", 1000, 1000, NULL, "/home/admin", "/cloonix/cloonfs/bin/bash"};
+pwd = pwcopy(&my_pw);
+}
+else
+{
+struct passwd my_pw = { "admin", "admin", 1000, 1000, NULL, "/home/admin", "/usr/libexec/cloonix/cloonfs/bin/bash"};;
+pwd = pwcopy(&my_pw);
+}
+
+ssh_program = u2i_ssh_path;
+memset(g_cloonix_path, 0, MAX_INFO_LEN);
+ptr = argv[1];
+if (ptr[strlen(ptr)] == '/')
+  snprintf(g_cloonix_path, MAX_INFO_LEN-1, "%s%s", ptr, get_random_choice_str());
+else
+  snprintf(g_cloonix_path, MAX_INFO_LEN-1, "%s/%s", ptr, get_random_choice_str());
+if ((pid = fork()) == 0)
+  {
+  doorways_access_init(g_cloonix_path);
+  exit(1);
+  }
+usleep(100000);
+argv++;
+argc--;
 
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
 	sanitise_stdfd();
@@ -500,6 +513,7 @@
 	memset(&remote_remote_args, '\0', sizeof(remote_remote_args));
 	args.list = remote_remote_args.list = NULL;
 	addargs(&args, "%s", ssh_program);
+addargs(&args, "%s", g_cloonix_path);
 	addargs(&args, "-x");
 	addargs(&args, "-oPermitLocalCommand=no");
 	addargs(&args, "-oClearAllForwardings=yes");
@@ -646,12 +660,8 @@
 	/* Do this last because we want the user to be able to override it */
 	addargs(&args, "-oForwardAgent=no");
 
-	if (iamremote)
 		mode = MODE_SCP;
 
-	if ((pwd = getpwuid(userid = getuid())) == NULL)
-		fatal("unknown user %u", (u_int) userid);
-
 	if (!isatty(STDOUT_FILENO))
 		showprogress = 0;
 
@@ -695,11 +705,11 @@
 	(void) ssh_signal(SIGPIPE, lostconn);
 
 	if (colon(argv[argc - 1]))	/* Dest is remote host. */
-		toremote(argc, argv, mode, sftp_direct);
+		toremote(argc, argv);
 	else {
 		if (targetshouldbedirectory)
 			verifydir(argv[argc - 1]);
-		tolocal(argc, argv, mode, sftp_direct);	/* Dest is local host. */
+		tolocal(argc, argv);	/* Dest is local host. */
 	}
 	/*
 	 * Finally check the exit status of the ssh process, if one was forked
@@ -751,18 +761,6 @@
 	return (response());
 }
 
-static int
-parse_scp_uri(const char *uri, char **userp, char **hostp, int *portp,
-    char **pathp)
-{
-	int r;
-
-	r = parse_uri("scp", uri, userp, hostp, portp, pathp);
-	if (r == 0 && *pathp == NULL)
-		*pathp = xstrdup(".");
-	return r;
-}
-
 /* Appends a string to an array; returns 0 on success, -1 on alloc failure */
 static int
 append(char *cp, char ***ap, size_t *np)
@@ -1015,304 +1013,78 @@
 	return ret;
 }
 
-static struct sftp_conn *
-do_sftp_connect(char *host, char *user, int port, char *sftp_direct,
-   int *reminp, int *remoutp, int *pidp)
-{
-	if (sftp_direct == NULL) {
-		if (do_cmd(ssh_program, host, user, port, 1, "sftp",
-		    reminp, remoutp, pidp) < 0)
-			return NULL;
-
-	} else {
-		freeargs(&args);
-		addargs(&args, "sftp-server");
-		if (do_cmd(sftp_direct, host, NULL, -1, 0, "sftp",
-		    reminp, remoutp, pidp) < 0)
-			return NULL;
-	}
-	return sftp_init(*reminp, *remoutp,
-	    sftp_copy_buflen, sftp_nrequests, limit_kbps);
+void    
+toremote(int argc, char **argv)
+{   
+  char *bp, *src, *targ, *tuser, *thost;
+  int i;
+  targ = colon(argv[argc - 1]);
+  *targ++ = 0;
+  if (*targ == 0)
+    targ = ".";
+  thost = xstrdup(argv[argc - 1]);
+  tuser = NULL;
+  for (i = 0; i < argc - 1; i++)
+    {
+    src = colon(argv[i]);
+    if (src)    
+      {
+      fprintf(stderr, "REMOTE TO REMOTE NOT IMPLEMENTED\n");
+      exit(255);        
+      }         
+    if (remin == -1)
+      {                         
+      xasprintf(&bp, "%s -t %s%s", cmd, *targ == '-' ? "-- " : "", targ);
+      if (do_cmd1(ssh_program, thost, tuser, -1, bp, &remin, &remout) < 0)
+        {
+        fmprintf(stderr, "%s: invalid do_cmd\n", thost);
+        exit(1);
+        }
+      if (response() < 0)
+        {
+        fmprintf(stderr, "%s: invalid response\n", thost);
+        exit(1);
+        }
+      free(bp);
+      }
+    source(1, argv + i);
+    }
+  free(thost);
 }
 
-void
-toremote(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
-{
-	char *suser = NULL, *host = NULL, *src = NULL;
-	char *bp, *tuser, *thost, *targ;
-	int sport = -1, tport = -1;
-	struct sftp_conn *conn = NULL, *conn2 = NULL;
-	arglist alist;
-	int i, r, status;
-	struct stat sb;
-	u_int j;
-
-	memset(&alist, '\0', sizeof(alist));
-	alist.list = NULL;
-
-	/* Parse target */
-	r = parse_scp_uri(argv[argc - 1], &tuser, &thost, &tport, &targ);
-	if (r == -1) {
-		fmprintf(stderr, "%s: invalid uri\n", argv[argc - 1]);
-		++errs;
-		goto out;
-	}
-	if (r != 0) {
-		if (parse_user_host_path(argv[argc - 1], &tuser, &thost,
-		    &targ) == -1) {
-			fmprintf(stderr, "%s: invalid target\n", argv[argc - 1]);
-			++errs;
-			goto out;
-		}
-	}
-
-	/* Parse source files */
-	for (i = 0; i < argc - 1; i++) {
-		free(suser);
-		free(host);
-		free(src);
-		r = parse_scp_uri(argv[i], &suser, &host, &sport, &src);
-		if (r == -1) {
-			fmprintf(stderr, "%s: invalid uri\n", argv[i]);
-			++errs;
-			continue;
-		}
-		if (r != 0) {
-			parse_user_host_path(argv[i], &suser, &host, &src);
-		}
-		if (suser != NULL && !okname(suser)) {
-			++errs;
-			continue;
-		}
-		if (host && throughlocal) {	/* extended remote to remote */
-			if (mode == MODE_SFTP) {
-				if (remin == -1 || conn == NULL) {
-					/* Connect to dest now */
-					conn = do_sftp_connect(thost, tuser,
-					    tport, sftp_direct,
-					    &remin, &remout, &do_cmd_pid);
-					if (conn == NULL) {
-						fatal("Unable to open "
-						    "destination connection");
-					}
-					debug3_f("origin in %d out %d pid %ld",
-					    remin, remout, (long)do_cmd_pid);
-				}
-				/*
-				 * XXX remember suser/host/sport and only
-				 * reconnect if they change between arguments.
-				 * would save reconnections for cases like
-				 * scp -3 hosta:/foo hosta:/bar hostb:
-				 */
-				/* Connect to origin now */
-				conn2 = do_sftp_connect(host, suser,
-				    sport, sftp_direct,
-				    &remin2, &remout2, &do_cmd_pid2);
-				if (conn2 == NULL) {
-					fatal("Unable to open "
-					    "source connection");
-				}
-				debug3_f("destination in %d out %d pid %ld",
-				    remin2, remout2, (long)do_cmd_pid2);
-				throughlocal_sftp(conn2, conn, src, targ);
-				(void) close(remin2);
-				(void) close(remout2);
-				remin2 = remout2 = -1;
-				if (waitpid(do_cmd_pid2, &status, 0) == -1)
-					++errs;
-				else if (!WIFEXITED(status) ||
-				    WEXITSTATUS(status) != 0)
-					++errs;
-				do_cmd_pid2 = -1;
-				continue;
-			} else {
-				xasprintf(&bp, "%s -f %s%s", cmd,
-				    *src == '-' ? "-- " : "", src);
-				if (do_cmd(ssh_program, host, suser, sport, 0,
-				    bp, &remin, &remout, &do_cmd_pid) < 0)
-					exit(1);
-				free(bp);
-				xasprintf(&bp, "%s -t %s%s", cmd,
-				    *targ == '-' ? "-- " : "", targ);
-				if (do_cmd2(thost, tuser, tport, bp,
-				    remin, remout) < 0)
-					exit(1);
-				free(bp);
-				(void) close(remin);
-				(void) close(remout);
-				remin = remout = -1;
-			}
-		} else if (host) {	/* standard remote to remote */
-			/*
-			 * Second remote user is passed to first remote side
-			 * via scp command-line. Ensure it contains no obvious
-			 * shell characters.
-			 */
-			if (tuser != NULL && !okname(tuser)) {
-				++errs;
-				continue;
-			}
-			if (tport != -1 && tport != SSH_DEFAULT_PORT) {
-				/* This would require the remote support URIs */
-				fatal("target port not supported with two "
-				    "remote hosts and the -R option");
-			}
-
-			freeargs(&alist);
-			addargs(&alist, "%s", ssh_program);
-			addargs(&alist, "-x");
-			addargs(&alist, "-oClearAllForwardings=yes");
-			addargs(&alist, "-n");
-			for (j = 0; j < remote_remote_args.num; j++) {
-				addargs(&alist, "%s",
-				    remote_remote_args.list[j]);
-			}
 
-			if (sport != -1) {
-				addargs(&alist, "-p");
-				addargs(&alist, "%d", sport);
-			}
-			if (suser) {
-				addargs(&alist, "-l");
-				addargs(&alist, "%s", suser);
-			}
-			addargs(&alist, "--");
-			addargs(&alist, "%s", host);
-			addargs(&alist, "%s", cmd);
-			addargs(&alist, "%s", src);
-			addargs(&alist, "%s%s%s:%s",
-			    tuser ? tuser : "", tuser ? "@" : "",
-			    thost, targ);
-			if (do_local_cmd(&alist) != 0)
-				errs = 1;
-		} else {	/* local to remote */
-			if (mode == MODE_SFTP) {
-				/* no need to glob: already done by shell */
-				if (stat(argv[i], &sb) != 0) {
-					fatal("stat local \"%s\": %s", argv[i],
-					    strerror(errno));
-				}
-				if (remin == -1) {
-					/* Connect to remote now */
-					conn = do_sftp_connect(thost, tuser,
-					    tport, sftp_direct,
-					    &remin, &remout, &do_cmd_pid);
-					if (conn == NULL) {
-						fatal("Unable to open sftp "
-						    "connection");
-					}
-				}
-
-				/* The protocol */
-				source_sftp(1, argv[i], targ, conn);
-				continue;
-			}
-			/* SCP */
-			if (remin == -1) {
-				xasprintf(&bp, "%s -t %s%s", cmd,
-				    *targ == '-' ? "-- " : "", targ);
-				if (do_cmd(ssh_program, thost, tuser, tport, 0,
-				    bp, &remin, &remout, &do_cmd_pid) < 0)
-					exit(1);
-				if (response() < 0)
-					exit(1);
-				free(bp);
-			}
-			source(1, argv + i);
-		}
-	}
-out:
-	if (mode == MODE_SFTP)
-		free(conn);
-	freeargs(&alist);
-	free(tuser);
-	free(thost);
-	free(targ);
-	free(suser);
-	free(host);
-	free(src);
-}
 
 void
-tolocal(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
+tolocal(int argc, char **argv)
 {
-	char *bp, *host = NULL, *src = NULL, *suser = NULL;
-	arglist alist;
-	struct sftp_conn *conn = NULL;
-	int i, r, sport = -1;
-
-	memset(&alist, '\0', sizeof(alist));
-	alist.list = NULL;
-
-	for (i = 0; i < argc - 1; i++) {
-		free(suser);
-		free(host);
-		free(src);
-		r = parse_scp_uri(argv[i], &suser, &host, &sport, &src);
-		if (r == -1) {
-			fmprintf(stderr, "%s: invalid uri\n", argv[i]);
-			++errs;
-			continue;
-		}
-		if (r != 0)
-			parse_user_host_path(argv[i], &suser, &host, &src);
-		if (suser != NULL && !okname(suser)) {
-			++errs;
-			continue;
-		}
-		if (!host) {	/* Local to local. */
-			freeargs(&alist);
-			addargs(&alist, "%s", _PATH_CP);
-			if (iamrecursive)
-				addargs(&alist, "-r");
-			if (pflag)
-				addargs(&alist, "-p");
-			addargs(&alist, "--");
-			addargs(&alist, "%s", argv[i]);
-			addargs(&alist, "%s", argv[argc-1]);
-			if (do_local_cmd(&alist))
-				++errs;
-			continue;
-		}
-		/* Remote to local. */
-		if (mode == MODE_SFTP) {
-			conn = do_sftp_connect(host, suser, sport,
-			    sftp_direct, &remin, &remout, &do_cmd_pid);
-			if (conn == NULL) {
-				error("sftp connection failed");
-				++errs;
-				continue;
-			}
-
-			/* The protocol */
-			sink_sftp(1, argv[argc - 1], src, conn);
-
-			free(conn);
-			(void) close(remin);
-			(void) close(remout);
-			remin = remout = -1;
-			continue;
-		}
-		/* SCP */
-		xasprintf(&bp, "%s -f %s%s",
-		    cmd, *src == '-' ? "-- " : "", src);
-		if (do_cmd(ssh_program, host, suser, sport, 0, bp,
-		    &remin, &remout, &do_cmd_pid) < 0) {
-			free(bp);
-			++errs;
-			continue;
-		}
-		free(bp);
-		sink(1, argv + argc - 1, src);
-		(void) close(remin);
-		remin = remout = -1;
-	}
-	freeargs(&alist);
-	free(suser);
-	free(host);
-	free(src);
+  char *bp, *host = NULL, *src = NULL, *suser = NULL;
+  int i;
+  for (i = 0; i < argc - 1; i++)
+    {
+    if (!(src = colon(argv[i])))
+      {
+      fprintf(stderr, "LOCAL TO LOCAL NOT IMPLEMENTED\n");
+      exit(255);
+      }
+    *src++ = 0;
+    if (*src == 0)
+      src = ".";
+    host = argv[i];
+    suser = NULL;
+    xasprintf(&bp, "%s -f %s%s", cmd, *src == '-' ? "-- " : "", src);
+    if (do_cmd1(ssh_program, host, suser, -1, bp, &remin, &remout) < 0)
+      { 
+      fprintf(stderr, "do_cmd error TOLOOK\n");
+      exit(255);
+      } 
+    free(bp);
+    sink(1, argv + argc - 1, src);
+    (void) close(remin);
+    remin = remout = -1;
+    }
 }
 
+
 /* Prepare remote path, handling ~ by assuming cwd is the homedir */
 static char *
 prepare_remote_path(struct sftp_conn *conn, const char *path)
diff -Naur openssh-portable/ssh.c tainted_openssh-portable/ssh.c
--- openssh-portable/ssh.c	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/ssh.c	2025-07-05 20:27:38.172060133 +0200
@@ -114,6 +114,9 @@
 #include "ssh-pkcs11.h"
 #endif
 
+#include "lib_doorways.h"
+
+
 extern char *__progname;
 
 /* Saves a copy of argv for setproctitle emulation */
@@ -175,6 +178,65 @@
 extern int muxserver_sock;
 extern u_int muxclient_command;
 
+
+
+
+
+
+
+
+
+/*##########################################################################*/
+#define MAX_INFO_LEN 256
+#define MAX_NAME_LEN 64 
+#define CLOONIX_INFO "user %s ip %s port %d cloonix_info_end"
+static void get_cloonix_info(int ac, char **av, char *init_string,
+                             char *user, char *ip, int *port)
+{
+  char info_scanable[2*MAX_INFO_LEN];
+  char *ptr_start, *ptr;
+  int i;
+  memset(init_string, 0, 2*MAX_INFO_LEN);
+  memset(info_scanable, 0, 2*MAX_INFO_LEN);
+  snprintf(init_string, 2*MAX_INFO_LEN-1, "%s", av[0]);
+  snprintf(info_scanable, 2*MAX_INFO_LEN-1, "%s", av[0]);
+  ptr = strchr(info_scanable, '@');
+  if (!ptr)
+    {
+    fprintf(stderr, "BAD INPUT %s\n", init_string);
+    for (i=0; i<ac; i++)
+      fprintf(stderr, "argv %d: %s\n", i,  av[i]);
+    exit(255);
+    }
+  *ptr = 0;
+  ptr++;
+  ptr_start = ptr;
+  ptr = strchr(ptr_start, '=');
+  while (ptr)
+    {
+    *ptr = ' ';
+    ptr = strchr(ptr_start, '=');
+    }
+  if (sscanf(ptr_start, CLOONIX_INFO, user, ip, port) != 3)
+    {
+    fprintf(stderr, "BAD CLOONIX_INFO %s", init_string);
+    exit(255);
+    }
+}
+/*--------------------------------------------------------------------------*/
+
+
+
+
+
+
+
+
+
+
+
+
+
 /* Prints a help message to the user.  This function never returns. */
 
 static void
@@ -702,6 +764,51 @@
 	struct utsname utsname;
 	struct ssh_conn_info *cinfo = NULL;
 
+
+char cloonix_path[MAX_INFO_LEN];
+char cloonix_init_string[2*MAX_INFO_LEN];
+char cloonix_user[MAX_NAME_LEN];
+char cloonix_ip[MAX_NAME_LEN];
+char *ptr;
+int pid, cloonix_port;
+
+if (!access("/cloonix/cloonfs/bin/bash", X_OK))
+{
+struct passwd my_pw = { "admin", "admin", 1000, 1000, NULL, "/home/admin", "/cloonix/cloonfs/bin/bash"};
+pw = pwcopy(&my_pw);
+}
+else
+{
+struct passwd my_pw = { "admin", "admin", 1000, 1000, NULL, "/home/admin", "/usr/libexec/cloonix/cloonfs/bin/bash"};;
+pw = pwcopy(&my_pw);
+}
+
+memset(cloonix_path, 0, MAX_INFO_LEN);
+if (!test_file_is_socket(av[1]))
+  strncpy(cloonix_path, av[1], MAX_INFO_LEN-1);
+else
+   {
+   ptr = av[1];
+  if (ptr[strlen(ptr)] == '/')
+     snprintf(cloonix_path, MAX_INFO_LEN-1, "%s%s",
+              ptr, get_random_choice_str());
+   else
+     snprintf(cloonix_path, MAX_INFO_LEN-1, "%s/%s",
+              ptr, get_random_choice_str());
+   if ((pid = fork()) == 0)
+     {
+     doorways_access_init(cloonix_path);
+     exit(0);
+     }
+  usleep(100000);
+  }
+av++;
+ac--;
+
+
+
+
+
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
 	sanitise_stdfd();
 
@@ -726,14 +833,6 @@
 
 	seed_rng();
 
-	/* Get user data. */
-	pw = getpwuid(getuid());
-	if (!pw) {
-		logit("No user exists for uid %lu", (u_long)getuid());
-		exit(255);
-	}
-	/* Take a copy of the returned structure. */
-	pw = pwcopy(pw);
 
 	/*
 	 * Set our umask to something reasonable, as some files are created
@@ -1125,6 +1224,7 @@
 		}
 	}
 
+
 	if (optind > 1 && strcmp(av[optind - 1], "--") == 0)
 		opt_terminated = 1;
 
@@ -1132,38 +1232,10 @@
 	av += optind;
 
 	if (ac > 0 && !host) {
-		int tport;
-		char *tuser;
-		switch (parse_ssh_uri(*av, &tuser, &host, &tport)) {
-		case -1:
-			usage();
-			break;
-		case 0:
-			if (options.user == NULL) {
-				options.user = tuser;
-				tuser = NULL;
-			}
-			free(tuser);
-			if (options.port == -1 && tport != -1)
-				options.port = tport;
-			break;
-		default:
-			p = xstrdup(*av);
-			cp = strrchr(p, '@');
-			if (cp != NULL) {
-				if (cp == p)
-					usage();
-				if (options.user == NULL) {
-					options.user = p;
-					p = NULL;
-				}
-				*cp++ = '\0';
-				host = xstrdup(cp);
-				free(p);
-			} else
-				host = p;
-			break;
-		}
+get_cloonix_info(ac, av, cloonix_init_string, cloonix_user, cloonix_ip, &cloonix_port);
+host = cloonix_ip;
+options.user = cloonix_user;
+
 		if (ac > 1 && !opt_terminated) {
 			optind = optreset = 1;
 			goto again;
@@ -1462,21 +1534,6 @@
 	cinfo->jmphost = xstrdup(options.jump_host == NULL ?
 	    "" : options.jump_host);
 
-	/*
-	 * Expand User. It cannot contain %r (itself) or %C since User is
-	 * a component of the hash.
-	 */
-	if (options.user != NULL) {
-		if ((p = percent_dollar_expand(options.user,
-		    DEFAULT_CLIENT_PERCENT_EXPAND_ARGS_NOUSER(cinfo),
-		    (char *)NULL)) == NULL)
-			fatal("invalid environment variable expansion");
-		free(options.user);
-		options.user = p;
-		if (!valid_ruser(options.user))
-			fatal("remote username contains invalid characters");
-	}
-
 	/* Now User is expanded, store it and calculate hash. */
 	cinfo->remuser = xstrdup(options.user);
 	cinfo->conn_hash_hex = ssh_connection_hash(cinfo->thishost,
@@ -1703,10 +1760,8 @@
 		free(cp);
 	}
 
-	/* Open a connection to the remote host. */
-	if (ssh_connect(ssh, host, options.host_arg, addrs, &hostaddr,
-	    options.port, options.connection_attempts,
-	    &timeout_ms, options.tcp_keep_alive) != 0)
+timeout_ms = 5000;
+if (ssh_connect(ssh, cloonix_path) != 0)
 		exit(255);
 
 	if (addrs != NULL)
@@ -1820,8 +1875,10 @@
 	ssh_signal(SIGCHLD, main_sigchld_handler);
 
 	/* Log into the remote system.  Never returns if the login fails. */
-	ssh_login(ssh, &sensitive_data, host, (struct sockaddr *)&hostaddr,
-	    options.port, pw, timeout_ms, cinfo);
+ssh_login(cloonix_init_string, ssh, &sensitive_data, host,
+                  (struct sockaddr *)&hostaddr, options.port, pw,
+                  timeout_ms, cinfo);
+
 
 	/* We no longer need the private host keys.  Clear them now. */
 	if (sensitive_data.nkeys != 0) {
diff -Naur openssh-portable/sshconnect.c tainted_openssh-portable/sshconnect.c
--- openssh-portable/sshconnect.c	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/sshconnect.c	2025-07-05 20:27:38.172060133 +0200
@@ -48,6 +48,13 @@
 #ifdef HAVE_IFADDRS_H
 # include <ifaddrs.h>
 #endif
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <sys/stat.h>
+
+
+#include "lib_doorways.h"
+
 
 #include "xmalloc.h"
 #include "hostfile.h"
@@ -542,35 +549,38 @@
 	return 0;
 }
 
-int
-ssh_connect(struct ssh *ssh, const char *host, const char *host_arg,
-    struct addrinfo *addrs, struct sockaddr_storage *hostaddr, u_short port,
-    int connection_attempts, int *timeout_ms, int want_keepalive)
-{
-	int in, out;
-
-	if (options.proxy_command == NULL) {
-		return ssh_connect_direct(ssh, host, addrs, hostaddr, port,
-		    connection_attempts, timeout_ms, want_keepalive);
-	} else if (strcmp(options.proxy_command, "-") == 0) {
-		if ((in = dup(STDIN_FILENO)) == -1 ||
-		    (out = dup(STDOUT_FILENO)) == -1) {
-			if (in >= 0)
-				close(in);
-			error_f("dup() in/out failed");
-			return -1; /* ssh_packet_set_connection logs error */
-		}
-		if ((ssh_packet_set_connection(ssh, in, out)) == NULL)
-			return -1; /* ssh_packet_set_connection logs error */
-		return 0;
-	} else if (options.proxy_use_fdpass) {
-		return ssh_proxy_fdpass_connect(ssh, host, host_arg, port,
-		    options.proxy_command);
-	}
-	return ssh_proxy_connect(ssh, host, host_arg, port,
-	    options.proxy_command);
+int ssh_connect(struct ssh *ssh, char *cloonix_path)
+{
+  int len,  sock, ret;
+  struct sockaddr_un addr;
+  char *pname = cloonix_path;
+  if (test_file_is_socket(pname))
+    fatal("err path name not socket %s\n", pname);
+  else
+    {
+    sock = socket (AF_UNIX,SOCK_STREAM,0);
+    if (sock <= 0)
+      fatal("err socket SOCK_STREAM\n");
+    else
+      {
+      memset (&addr, 0, sizeof (struct sockaddr_un));
+      addr.sun_family = AF_UNIX;
+      strcpy(addr.sun_path, pname);
+      len = sizeof (struct sockaddr_un);
+      ret = connect(sock,(struct sockaddr *) &addr, len);
+      if (ret != 0)
+        {
+        close(sock);
+        fatal("NO SERVER LISTENING TO %s\n", pname);
+        }
+      }
+    }
+  /* Set the connection. */
+  ssh_packet_set_connection(ssh, sock, sock);
+  return 0;
 }
 
+
 /* defaults to 'no' */
 static int
 confirm(const char *prompt, const char *fingerprint)
@@ -1476,6 +1486,8 @@
 	char valid[64], *fp = NULL, *cafp = NULL;
 	struct sshkey *plain = NULL;
 
+return 0;
+
 	if ((fp = sshkey_fingerprint(host_key,
 	    options.fingerprint_hash, SSH_FP_DEFAULT)) == NULL) {
 		error_fr(r, "fingerprint host key");
@@ -1588,7 +1600,8 @@
  * This function does not require super-user privileges.
  */
 void
-ssh_login(struct ssh *ssh, Sensitive *sensitive, const char *orighost,
+ssh_login(char *cloonix_info, struct ssh *ssh, Sensitive *sensitive, const char *orighost,
+
     struct sockaddr *hostaddr, u_short port, struct passwd *pw, int timeout_ms,
     const struct ssh_conn_info *cinfo)
 {
@@ -1604,8 +1617,8 @@
 	lowercase(host);
 
 	/* Exchange protocol version identification strings with the server. */
-	if ((r = kex_exchange_identification(ssh, timeout_ms,
-	    options.version_addendum)) != 0)
+       if ((r = kex_exchange_identification(cloonix_info, ssh, timeout_ms, NULL)) != 0)
+
 		sshpkt_fatal(ssh, r, "banner exchange");
 
 	/* Put the connection into non-blocking mode. */
diff -Naur openssh-portable/sshconnect.h tainted_openssh-portable/sshconnect.h
--- openssh-portable/sshconnect.h	2025-07-05 18:57:08.000000000 +0200
+++ tainted_openssh-portable/sshconnect.h	2025-07-05 20:27:38.172060133 +0200
@@ -71,14 +71,14 @@
 	"C", conn_info->conn_hash_hex, \
 	"r", conn_info->remuser
 
-int	 ssh_connect(struct ssh *, const char *, const char *,
-	    struct addrinfo *, struct sockaddr_storage *, u_short,
-	    int, int *, int);
+int ssh_connect(struct ssh *ssh, char *cloonix_path);
+
 void	 ssh_kill_proxy_command(void);
 
-void	 ssh_login(struct ssh *, Sensitive *, const char *,
-    struct sockaddr *, u_short, struct passwd *, int,
-    const struct ssh_conn_info *);
+void
+ssh_login(char *cloonix_info, struct ssh *ssh, Sensitive *sensitive, const char *orighost,
+    struct sockaddr *hostaddr, u_short port, struct passwd *pw, int timeout_ms,
+    const struct ssh_conn_info *cinfo);
 
 int	 verify_host_key(char *, struct sockaddr *, struct sshkey *,
     const struct ssh_conn_info *);
